"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMutation = exports.useCustomMutation = void 0;
var _reactQuery = require("@tanstack/react-query");
var _commerceSdkIsomorphic = require("commerce-sdk-isomorphic");
var _useAuthContext = _interopRequireDefault(require("./useAuthContext"));
var _useConfig = _interopRequireDefault(require("./useConfig"));
var _useAuthorizationHeader = require("./useAuthorizationHeader");
var _useCustomerId = _interopRequireDefault(require("./useCustomerId"));
var _utils = require("./utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * Helper for mutation hooks, contains most of the logic in order to keep individual hooks small.
 * @param hookConfig - Config values that vary per API endpoint
 * @internal
 */
const useMutation = hookConfig => {
  const queryClient = (0, _reactQuery.useQueryClient)();
  const customerId = (0, _useCustomerId.default)();
  const authenticatedMethod = (0, _useAuthorizationHeader.useAuthorizationHeader)(hookConfig.method);
  return (0, _reactQuery.useMutation)(authenticatedMethod, {
    onSuccess(data, options) {
      // commerce-sdk-isomorphic merges `clientConfig` and `options` under the hood,
      // so we also need to do that to get the "net" options that are actually sent to SCAPI.
      const netOptions = (0, _utils.mergeOptions)(hookConfig.client, options);
      const cacheUpdates = hookConfig.getCacheUpdates(customerId, netOptions, data);
      (0, _utils.updateCache)(queryClient, cacheUpdates, data);
    }
  });
};

/**
 * A hook for SCAPI custom endpoint mutations.
 *
 * Besides calling custom endpoint, this hook does a few things for better DX.
 * 1. inject access token
 * 2. merge SCAPI client configurations from the CommerceApiProvider
 * @param apiOptions - Options passed through to commerce-sdk-isomorphic
 * @param mutationOptions - Options passed through to @tanstack/react-query
 * @returns A TanStack Query mutation hook with data from the custom API endpoint.
 */
exports.useMutation = useMutation;
const useCustomMutation = (apiOptions, mutationOptions) => {
  const config = (0, _useConfig.default)();
  const auth = (0, _useAuthContext.default)();
  const callCustomEndpointWithAuth = options => {
    return /*#__PURE__*/_asyncToGenerator(function* () {
      var _options$options;
      const clientConfig = options.clientConfig || {};
      const clientHeaders = config.headers || {};
      const {
        access_token
      } = yield auth.ready();
      return yield _commerceSdkIsomorphic.helpers.callCustomEndpoint(_objectSpread(_objectSpread({}, options), {}, {
        options: _objectSpread(_objectSpread({}, options.options), {}, {
          headers: _objectSpread(_objectSpread({
            Authorization: `Bearer ${access_token}`
          }, clientHeaders), (_options$options = options.options) === null || _options$options === void 0 ? void 0 : _options$options.headers)
        }),
        clientConfig: _objectSpread({
          parameters: {
            clientId: config.clientId,
            siteId: config.siteId,
            organizationId: config.organizationId,
            shortCode: config.organizationId
          },
          proxy: config.proxy
        }, clientConfig)
      }));
    });
  };
  return (0, _reactQuery.useMutation)(callCustomEndpointWithAuth(apiOptions), mutationOptions);
};
exports.useCustomMutation = useCustomMutation;